/*
Introduction
You find a strange mirror that always shows a hand that is moving. The hand appears to be alive, and after a lot of questions of "yes" and "no" answer, you know that the hand is trying to teach you a program that is written in HPL (Hand Programming Language).

This language works with a memory of an indefinite size of bytes, with all values initialized to 0. This language haves 7 instructions:

ðŸ‘‰ : moves the memory pointer to the next cell

ðŸ‘ˆ : moves the memory pointer to the previous cell

ðŸ‘† : increment the memory cell at the current position

ðŸ‘‡ : decreases the memory cell at the current position.

ðŸ¤œ : if the memory cell at the current position is 0, jump just after the corresponding ðŸ¤›

ðŸ¤› : if the memory cell at the current position is not 0, jump just after the corresponding ðŸ¤œ

ðŸ‘Š : Display the current character represented by the ASCII code defined by the current position.

Notes:
As memory cells are bytes, from 0 to 255 value, if you decrease 0 you'll get 255, if you increment 255 you'll get 0.
Loops of ðŸ¤œ and ðŸ¤› can be nested.
Tests
The hand shows you two small programs and their outputs:

This program display "Hello"
ðŸ‘‡ðŸ¤œðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘‡ðŸ‘ŠðŸ‘‡ðŸ¤œðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘Š

This program (with nested loops) display "Hello World!"
ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ¤œðŸ‘‡ðŸ‘ˆðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘ŠðŸ‘‰ðŸ‘‰ðŸ‘†ðŸ‘‰ðŸ‘‡ðŸ¤œðŸ‘†ðŸ¤›ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ¤œðŸ‘‰ðŸ¤œðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ˆðŸ‘ˆðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘‰ðŸ‘‡ðŸ‘ŠðŸ‘ˆðŸ‘ˆðŸ‘†ðŸ¤œðŸ‘‰ðŸ¤œðŸ‘†ðŸ‘‰ðŸ‘†ðŸ¤›ðŸ‘‰ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘‰ðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘†ðŸ‘ŠðŸ‘‰ðŸ‘†ðŸ‘Š
*/

const Min_Cell = 0
const Max_Cell = 250

const clamp = value =>{
    if (value > Max_Cell) return Min_Cell
    if (value < Min_Cell) return Max_Cell
    return value
}

const getNextFistIndex = (index , instructions) => {
    let fists = 1
    for (let i = index + 1; i < ArrayOfIntructions.length; i++) {
        if( instructions[i] === "ðŸ¤œ") fists++
        if( instructions[i] === "ðŸ¤›") fists--
        if (fists === 0) return i
    }

}

const getPrevFistIndex = (index , instructions) => {
    let fists = 1
    for (let i = index - 1; i >= 0; i--) {
        if( instructions[i] === "ðŸ¤›") fists++
        if( instructions[i] === "ðŸ¤œ") fists--
        if (fists === 0) return i
    }

}

export function translate (string) {
    const memory = [0]

    const pointer = 0
    const index = 0
    const output = ""

    const ArrayOfIntructions = Array.from(string)

    const actions = {
        "ðŸ‘‰": () => {
            pointer++
            memory[pointer] ??= 0
        },
        "ðŸ‘ˆ": () => {
            pointer--
            memory[pointer] ??= 0
        },
        "ðŸ‘†": () => {
         memory[pointer] = clamp(memory[pointer] + 1)
        },

        "ðŸ‘‡"  :() => {
            memory[pointer] = clamp(memory[pointer] - 1)
        },

        "ðŸ¤œ" :() =>{
            if (memory[pointer] === 0 ){
                index = getNextFistIndex(index, ArrayOfIntructions)
            }
            
        },

        "ðŸ¤›" :() =>{
            if (memory[pointer] !== 0 ){
                index = getPrevFistIndex(index, ArrayOfIntructions)
            }
        },

        "ðŸ‘Š" :() =>{
            output += String.fromCharCode(memory[pointer])
        }

    }

    while( index < ArrayOfIntructions.length) {
        const action = ArrayOfIntructions[index]
        actions[action]()
        console.log(action)
        index++
    }
     return output
    }


     console.log(
        translate("ðŸ‘‡ðŸ¤œðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘‡ðŸ‘ŠðŸ‘‡ðŸ¤œðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘Š")
     )
